/**
 * Chain Parameters Monitor
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ TRON –∏ –∫—É—Ä—Å TRX –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

import fetch from 'node-fetch';
import fs from 'fs/promises';
import path from 'path';

export class ChainParametersMonitor {
  constructor(tronWeb) {
    this.tronWeb = tronWeb;
    this.cacheFile = path.join(process.cwd(), 'cache', 'chain-parameters.json');
    this.cache = null;
    this.cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏
   */
  async getChainParameters() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (await this.isCacheValid()) {
        return this.cache.parameters;
      }

      console.error('[CHAIN-PARAMS] Fetching fresh chain parameters...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –Ω–æ–¥—ã
      const response = await fetch(`${this.tronWeb.fullNode.host}/wallet/getchainparameters`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const params = {};
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –æ–±—ä–µ–∫—Ç
      for (const item of data.chainParameter || []) {
        params[item.key] = item.value;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      await this.saveToCache({ parameters: params });
      
      return params;
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error fetching chain parameters:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.cache) {
        return this.cache.parameters;
      }
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –∑–∞ 1 TRX
   */
  async getEnergyPerTRX() {
    try {
      const accountResource = await this.tronWeb.trx.getAccountResources();
      
      const totalEnergyLimit = accountResource.TotalEnergyLimit || 0;
      const totalEnergyWeight = accountResource.TotalEnergyWeight || 0;
      
      if (totalEnergyWeight > 0) {
        return totalEnergyLimit / totalEnergyWeight;
      }
      
      // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
      return 2380; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —è–Ω–≤–∞—Ä—å 2025
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error getting energy per TRX:', error);
      return 2380;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TRX –≤ USD
   */
  async getTRXPrice() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (await this.isCacheValid() && this.cache.trxPrice) {
        const priceAge = Date.now() - new Date(this.cache.trxPriceUpdated).getTime();
        if (priceAge < 60000) { // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
          return this.cache.trxPrice;
        }
      }

      console.error('[CHAIN-PARAMS] Fetching fresh TRX price...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å CoinGecko
      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=tron&vs_currencies=usd');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const price = data.tron?.usd || 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      if (this.cache) {
        this.cache.trxPrice = price;
        this.cache.trxPriceUpdated = new Date().toISOString();
        await this.saveToCache(this.cache);
      }

      return price;
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error fetching TRX price:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
      if (this.cache && this.cache.trxPrice) {
        return this.cache.trxPrice;
      }
      return 0.146; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –≤ TRX –∏ USD
   */
  async getEnergyCost() {
    try {
      const params = await this.getChainParameters();
      const energyFeeSun = params.getEnergyFee || 420;
      const trxPrice = await this.getTRXPrice();
      const energyPerTRX = await this.getEnergyPerTRX();
      
      // –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—ã —ç–Ω–µ—Ä–≥–∏–∏ –≤ TRX
      const energyCostTRX = energyFeeSun / 1_000_000;
      
      // –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—ã —ç–Ω–µ—Ä–≥–∏–∏ –≤ USD
      const energyCostUSD = energyCostTRX * trxPrice;
      
      return {
        energyFeeSun,
        energyCostTRX,
        energyCostUSD,
        trxPrice,
        energyPerTRX,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error calculating energy cost:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      return {
        energyFeeSun: 420,
        energyCostTRX: 0.00042,
        energyCostUSD: 0.00006132,
        trxPrice: 0.146,
        energyPerTRX: 2380,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è USDT —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
   */
  async getUSDTTransferEnergy(toAddress, isNewAddress = null) {
    try {
      // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
      if (isNewAddress === null) {
        try {
          const account = await this.tronWeb.trx.getAccount(toAddress);
          isNewAddress = !account || !account.address;
        } catch {
          isNewAddress = true; // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
      }

      // –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–æ–≤ netts.io
      const energy = isNewAddress ? 130285 : 64285;
      
      return {
        energy,
        isNewAddress,
        description: isNewAddress 
          ? '–ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ USDT –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥)'
          : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ USDT'
      };
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error getting USDT transfer energy:', error);
      return {
        energy: 65000,
        isNewAddress: false,
        description: '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏)'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async getTransactionCostInfo(contractAddress, functionName, parameters = []) {
    try {
      const energyCost = await this.getEnergyCost();
      let energyRequired = 0;
      let description = '';

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è USDT
      if (contractAddress === 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t' && functionName === 'transfer') {
        const toAddress = parameters[0];
        const usdtInfo = await this.getUSDTTransferEnergy(toAddress);
        energyRequired = usdtInfo.energy;
        description = usdtInfo.description;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É
        energyRequired = 50000; // –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        description = '–û—Ü–µ–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞';
      }

      const costInTRX = (energyRequired * energyCost.energyFeeSun) / 1_000_000;
      const costInUSD = costInTRX * energyCost.trxPrice;

      return {
        energyRequired,
        energyCost: energyCost.energyCostTRX,
        energyCostUSD: energyCost.energyCostUSD,
        totalCostTRX: costInTRX,
        totalCostUSD: costInUSD,
        trxPrice: energyCost.trxPrice,
        energyPerTRX: energyCost.energyPerTRX,
        description,
        timestamp: energyCost.timestamp
      };
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error getting transaction cost info:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞
   */
  async isCacheValid() {
    try {
      if (!this.cache) {
        const data = await fs.readFile(this.cacheFile, 'utf8');
        this.cache = JSON.parse(data);
      }

      const cacheAge = Date.now() - new Date(this.cache.timestamp).getTime();
      return cacheAge < this.cacheExpiry;
    } catch {
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
   */
  async saveToCache(data) {
    try {
      this.cache = {
        ...data,
        timestamp: new Date().toISOString()
      };

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const cacheDir = path.dirname(this.cacheFile);
      await fs.mkdir(cacheDir, { recursive: true });

      await fs.writeFile(this.cacheFile, JSON.stringify(this.cache, null, 2));
    } catch (error) {
      console.error('[CHAIN-PARAMS] Error saving cache:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  formatCostResult(costInfo, amount = 1, tokenName = 'USDT') {
    return `üìä **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏**

üí∞ **–û–ø–µ—Ä–∞—Ü–∏—è:** –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} ${tokenName}
‚ö° **–¢—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏:** ${costInfo.energyRequired.toLocaleString()}
üìù **–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${costInfo.description}

üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏:**
‚Ä¢ 1 –µ–¥–∏–Ω–∏—Ü–∞ = ${costInfo.energyCost.toFixed(6)} TRX (${costInfo.energyCostUSD.toFixed(6)} USD)
‚Ä¢ 1 TRX = ${costInfo.energyPerTRX.toFixed(0)} —ç–Ω–µ—Ä–≥–∏–∏

üí∏ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:**
‚Ä¢ –í TRX: ${costInfo.totalCostTRX.toFixed(6)} TRX
‚Ä¢ –í USD: $${costInfo.totalCostUSD.toFixed(4)}

üìà **–ö—É—Ä—Å TRX:** $${costInfo.trxPrice.toFixed(6)}
üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${new Date(costInfo.timestamp).toLocaleString()}

‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∂–∂–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TRX`;
  }
}

export default ChainParametersMonitor;